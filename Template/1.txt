ECMAScript - язык общего назначения

JavaScript - специализация ECMAScript для браузеров. В JavaScript есть
объекты window, document, (window.getElementById()), console

ES6 (ES2015), ES7 - новые версии ECMAScript. В браузерах они пока
не работают, но ожидается, что со временем все браузеры научатся понимать
и эти версии языка.
В принципе, этими версиями языка пользуются уже сейчас. Но тогда
требуется "компиляция", т.е. превращение кода на ES6 в "обычный"
JavaScript.
Т.е., обращайте внимание на примеры кода в Интернете, на какой
версии языка они написаны.

Чтобы изучать JavaScript достаточно иметь любой браузер. Можно
изучать язык, набирая команды в консоли браузера.
F12 - открывает инструменты разработчика. Далее - вкладка Console,
либо нажмите Escape, консоль появится снизу.

JavaScript:
числа: 10, 20, 1.5 - нецелое число
строчки: 'asdf', "asdf" - строки, кавычки не важны.
'asdfasdf " asfasdf'
"asdfasdfa" asdfasd"
массивы:
набор элементов можно задать, перечислив их в квадратных скобках
a = [10, 20, 30]
массив из трех чисел
Массивы могут хранить значения разных типов:
b = [10, 20, "asdf"]
typeof b - можно, в принципе, узнать тип значения, но старайтесь
без этого обходиться
Логические значения, тип boolean
true, false
var flag = true

JavaScript автоматически преобразует типы.
Если JavaScript ожидает один тип, а видит другой, то превращает
то что видит, в то, что ожидает.
Пример:
if (10) {
 console.log('Hello world');
}
в if ожидается тип boolean. Но JavaScript видит число. Поэтому
число будет преобразовано в boolean. (0 = false, иначе = true)
if ("asdf") {
}
строки при превращении в boolean: "" - пустая строка false,
остальные - true.
true && x <- заставит x превратиться в логическое значение 
(не заставляет)
!x - отрицание точно делает результат логическим
!!x - узнаем, чему соответствует x как Boolean

Если !!x превращает x в логическое значение
+x превращает x в число.

Массивы в JavaScript больше похожи на списки в Java, с ними
можно делать операции как со списками: добавлять элементы в конец,
в начало, вырезать куски массива:
var a = [10, 20, 30];
console.log(a[2]); //второй элемент, т.е. 30
a[2] = 31 //можно присвоить
a[10] = 100
индексы с третьего по девятый имеют значение undefined,
означает, что переменная не определена.
a[200] - это не ошибка, просто получится значение undefined
a.push(42) - дописать в конец массива
a.slice() - получить часть массива от одного индекса до другого
a.slice(от, до) - с какого индекса по какой скопировать. Оба значения
можно не указывать. Без "до" - до конца. Без "от" и "до"
- с начала до конца, фактически, массив копируется.
Это именно копирование массива.
(Замечание: a = [10, 20, 30]; b = a; изменения a меняет и b тоже
b = a.slice() - теперь b это новый массив)

Удаление и добавление элементов в массив, операция splice
a = [10, 20, 30];
a.splice(from, count, что вставить)
a.splice(1, 1, 11, 22, 33)
- с первого индекса удаляется 1 элемент, и туда вставляется 11, 22, 33
(возвращается то, что удалили)
Т.е. операции push и splice изменяют исходный массив

Как вставить один элемент x в начало.
a.splice(0, 0, x)

//Как заводить переменную
ключевое слово var
var имя = значение.
переменная заводится в текущей функции.
Если вы забудете завести переменную с помощью var и начнете ей
пользоваться, то это будет "глобальная" переменная. Доступная 
сразу во всей программе. Этим рекомендуется пользоваться очень
редко, при крайней необходимости. Поэтому не забывайте ставить
var перед тем, как пользоваться переменной.
Если вы воспольуетесь переменной до того как присвоете ей значение

console.log(username); // значение undefined
var username = "";

//управляющие констркции, всё как в Java

if (...) {
} else { - необязательный else, {} можно не ставить, если одно действие
}

точки с запятой в конце в современной JS ставить не рекомендуется.
Но у нас JS "обычный", поэтому давайте ставить ; везде в конце
инструкций. Как в Java
( Проблема с ;
 return 
        x + 1;
 В Java это означает return x + 1
 в JavaScript это означает
 return;
 x + 1;
)

for (var i = 0; i < a.length; i++) //цикл только стандартный для Java
  ...
for (i = 0; i < b.length; i++)

если написано два массива с переменной i, то var нужен только 
один раз, иначе вы заводите переменную дважды.

функции в JavaScript, позже обсудим подробней
function name(arg1, arg2) {
  return arg1 + arg2;
}
Всё как в Java, но не указываются типы. return необязателен.
Если функция не сделала return, то ее результат undefined.